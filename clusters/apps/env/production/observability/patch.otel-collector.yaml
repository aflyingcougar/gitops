---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: otel-collector
spec:
  interval: 5m
  timeout: 10m
  install:
    timeout: 10m
  chart:
    spec:
      chart: opentelemetry-collector
      version: 0.48.2
      sourceRef:
        kind: HelmRepository
        name: opentelemetry-charts
        namespace: flux-system
  values:
    nameOverride: ""
    fullnameOverride: ""
    # Valid values are "daemonset", "deployment", and "statefulset".
    mode: "daemonset"
    # Handles basic configuration of components that
    # also require k8s modifications to work correctly.
    # .Values.config can be used to modify/add to a preset
    # component configuration, but CANNOT be used to remove
    # preset configuration. If you require removal of any
    # sections of a preset configuration, you cannot use
    # the preset. Instead, configure the component manually in
    # .Values.config and use the other fields supplied in the
    # values.yaml to configure k8s as necessary.
    presets:
      # Configures the collector to collect logs.
      # Adds the filelog receiver to the logs pipeline
      # and adds the necessary volumes and volume mounts.
      # Best used with mode = daemonset.
      logsCollection:
        enabled: true
        includeCollectorLogs: true
        # Enabling this writes checkpoints in /var/lib/otelcol/ host directory.
        # Note this changes collector's user to root, so that it can write to host directory.
        storeCheckpoints: false
      # Configures the collector to collect host metrics.
      # Adds the hostmetrics receiver to the metrics pipeline
      # and adds the necessary volumes and volume mounts.
      # Best used with mode = daemonset.
      hostMetrics:
        enabled: true
      # Configures the Kubernetes Processor to add Kubernetes metadata.
      # Adds the k8sattributes processor to all the pipelines
      # and adds the necessary rules to ClusteRole.
      # Best used with mode = daemonset.
      kubernetesAttributes:
        enabled: true
      # Configures the Kubernetes Cluster Receiver to collect cluster-level metrics.
      # Adds the k8s_cluster receiver to the metrics pipeline
      # and adds the necessary rules to ClusteRole.
      # Best used with mode = deployment or statefulset.
      clusterMetrics:
        enabled: true
      # Configures the collector to collect Kubelet metrics.
      # Adds the kubeletstats receiver to the metrics pipeline
      # and adds the necessary rules to ClusteRole.
      # Best used with mode = daemonset.
      kubeletMetrics:
        enabled: true

    configMap:
      # Specifies whether a configMap should be created (true by default)
      create: true

    # Base collector configuration.
    # Supports templating. To escape existing instances of {{ }}, use {{` <original content> `}}.
    # For example, {{ REDACTED_EMAIL }} becomes {{` {{ REDACTED_EMAIL }} `}}.
    config:
      exporters:
        logging: {}
      extensions:
        # The health_check extension is mandatory for this chart.
        # Without the health_check extension the collector will fail the readiness and liveliness probes.
        # The health_check extension can be modified, but should never be removed.
        health_check: {}
        memory_ballast: {}
      processors:
        batch: {}
        # If set to null, will be overridden with values based on k8s resource limits
        memory_limiter: null
      receivers:
        jaeger:
          protocols:
            grpc:
              endpoint: ${MY_POD_IP}:14250
            thrift_http:
              endpoint: ${MY_POD_IP}:14268
            thrift_compact:
              endpoint: ${MY_POD_IP}:6831
        otlp:
          protocols:
            grpc:
              endpoint: ${MY_POD_IP}:4317
            http:
              endpoint: ${MY_POD_IP}:4318
        prometheus:
          config:
            scrape_configs:
              - job_name: opentelemetry-collector
                scrape_interval: 10s
                static_configs:
                  - targets:
                      - ${MY_POD_IP}:8888
        zipkin:
          endpoint: ${MY_POD_IP}:9411
      service:
        telemetry:
          metrics:
            address: ${MY_POD_IP}:8888
        extensions:
          - health_check
          - memory_ballast
        pipelines:
          logs:
            exporters:
              - logging
            processors:
              - memory_limiter
              - batch
            receivers:
              - otlp
          metrics:
            exporters:
              - logging
            processors:
              - memory_limiter
              - batch
            receivers:
              - otlp
              - prometheus
          traces:
            exporters:
              - logging
            processors:
              - memory_limiter
              - batch
            receivers:
              - otlp
              - jaeger
              - zipkin
    podSecurityContext: {}
    securityContext: {}

    nodeSelector: {}
    tolerations: []
    affinity: {}
    topologySpreadConstraints: {}

    # Allows for pod scheduler prioritisation
    priorityClassName: ""

    extraEnvs: []
    extraVolumes: []
    extraVolumeMounts: []

    # Configuration for ports
    # nodePort is also allowed
    ports:
      otlp:
        enabled: true
        containerPort: 4317
        servicePort: 4317
        hostPort: 4317
        protocol: TCP
        # nodePort: 30317
        appProtocol: grpc
      otlp-http:
        enabled: true
        containerPort: 4318
        servicePort: 4318
        hostPort: 4318
        protocol: TCP
      jaeger-compact:
        enabled: true
        containerPort: 6831
        servicePort: 6831
        hostPort: 6831
        protocol: UDP
      jaeger-thrift:
        enabled: true
        containerPort: 14268
        servicePort: 14268
        hostPort: 14268
        protocol: TCP
      jaeger-grpc:
        enabled: true
        containerPort: 14250
        servicePort: 14250
        hostPort: 14250
        protocol: TCP
      zipkin:
        enabled: true
        containerPort: 9411
        servicePort: 9411
        hostPort: 9411
        protocol: TCP
      metrics:
        # The metrics port is disabled by default. However you need to enable the port
        # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
        enabled: true
        containerPort: 8888
        servicePort: 8888
        protocol: TCP

    # Resource limits & requests. Update according to your own use case as these values might be too low for a typical deployment.
    resources:
      limits:
        cpu: 256m
        memory: 512Mi

    podAnnotations: {}

    podLabels: {}

    # Host networking requested for this pod. Use the host's network namespace.
    hostNetwork: false

    # Pod DNS policy ClusterFirst, ClusterFirstWithHostNet, None, Default, None
    dnsPolicy: "Default"
