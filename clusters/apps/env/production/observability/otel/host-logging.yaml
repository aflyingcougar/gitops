---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: host-logging
spec:
  mode: daemonset
  image: otel/opentelemetry-collector-contrib:0.80.0
  nodeSelector:
    kubernetes.io/arch: amd64
  volumeMounts:
    - name: hostvarlog
      mountPath: /host/var/log
    - name: scratchdir
      mountPath: /var/lib/otelcol
  volumes:
    - name: hostvarlog
      hostPath:
        path: /var/log
        type: Directory
    - name: scratchdir
      emptyDir:
        sizeLimit: 10Gi
  serviceAccount: collector
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      syslog:
        include:
          - /host/var/log/syslog
        start_at: end
        storage: file_storage
        include_file_path: true
        include_file_name: true
        operators:
          - type: move
            from: attributes["log.file.path"]
            to: resource["path"]
      podlog:
        include:
          - /host/var/log/pods/*/*/*.log
        exclude:
          - /host/var/log/pods/*/otc-container/*.log
        start_at: end
        storage: file_storage
        include_file_path: true
        include_file_name: false
        operators:
          - type: move
            from: attributes["log.file.path"]
            to: resource["path"]
          - type: router
            id: get-format
            routes:
              - output: parser-containerd
            expr: 'body matches "^[^ Z]+Z"'
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
      otlp:
        protocols:
          grpc:
    processors:
      batch:
      resource:
        attributes:
          - action: insert
            key: loki.resource.labels
            value: log.file.name, path, unit
          - action: insert
            key: loki.format
            value: raw
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.cluster.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
          # Pod labels which can be fetched via K8sattributeprocessor
          labels:
            - tag_name: key1
              key: label1
              from: pod
            - tag_name: key2
              key: label2
              from: pod
        # Pod association using resource attributes and connection
        pod_association:
          - from: resource_attribute
            name: k8s.pod.uid
          - from: resource_attribute
            name: k8s.pod.ip
          - from: connection
    exporters:
      logging:
        verbosity: debug
      loki:
        endpoint: "http://100.64.0.4:3100/loki/api/v1/push"
    extensions:
      health_check:
        path: "/health/status"
        endpoint: ":13333"
      file_storage:
        directory: /var/lib/otelcol
        timeout: 1s
        compaction:
          on_start: true
          on_rebound: true
          directory: /var/lib/otelcol
          max_transaction_size: 65530
      memory_ballast:
        size_in_percentage: 30
    service:
      extensions:
        - health_check
        - file_storage
        - memory_ballast
      telemetry:
        metrics:
          address: "localhost:8888"
      pipelines:
        podlog:
          receivers:
            - otlp
            - podlog
          processors:
            - k8sattributes
            - batch
          exporters:
            - logging
            - loki
        syslog:
          receivers:
            - otlp
            - syslog
          processors:
            - resource
            - batch
          exporters:
            - logging
            - loki
