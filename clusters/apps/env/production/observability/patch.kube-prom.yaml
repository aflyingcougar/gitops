---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus
spec:
  values:
    alertmanager:
      config:
        receivers:
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus - Home"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}
                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        global:
          resolve_timeout: 5m
          slack_api_url: ${SLACK_WEBHOOK_URL}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "discord"
              match_re:
                # severity: critical|warning
                severity: critical
              continue: true
        templates:
          - '/etc/alertmanager/config/*.tmpl'
      ingress:
        enabled: false
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 1Gi
        resources:
          requests:
            cpu: 11m
            memory: 50M
          limits:
            memory: 99M
    ##
    ## Grafana
    ##
    grafana:
      enabled: false
    ##
    ## Component Configs
    ##
    kubeApiServer:
      enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.130.31
        - 192.168.130.32
        - 192.168.130.33
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    coreDns:
      enabled: true
      service:
        port: 9153
        targetPort: 9153

    kubeEtcd:
      enabled: true
      endpoints:
        - 192.168.130.31
        - 192.168.130.32
        - 192.168.130.33
      service:
        enabled: true
        port: 2381
        targetPort: 2381

    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.130.31
        - 192.168.130.32
        - 192.168.130.33
      service:
        enabled: true
        port: 10249
        targetPort: 10249
      serviceMonitor:
        enabled: true
        https: false

    kubeProxy:
      enabled: false
      endpoints:
        - 192.168.130.31
        - 192.168.130.32
        - 192.168.130.33

    kubeStateMetrics:
      enabled: true

    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    prometheus-node-exporter:
    ## Prometheus Operator
    #
    prometheusOperator:
      admissionWebhooks:
        patch:
          resources:
            limits:
              cpu: 100m
              memory: 150Mi
            requests:
              cpu: 50m
              memory: 50Mi
      resources:
        limits:
          cpu: 200m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 50m
            memory: 50Mi
          limits:
            cpu: 100m
            memory: 50Mi
    ## Prometheus instance
    #
    prometheus:
      ingress:
        enabled: false
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retentionSize: "20GB"
        retention: 2d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 30Gi
        resources:
          requests:
            cpu: 587m
            memory: 4993M
          limits:
            memory: 5977M
