# https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus
  namespace: observability
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 14.5.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  values:
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverError: true
        kubeApiserverSlos: true
        kubelet: true
        kubePrometheusGeneral: true
        kubePrometheusNodeAlerting: true
        kubePrometheusNodeRecording: true
        kubernetesAbsent: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: true
        kubeStateMetrics: true
        network: true
        node: true
        prometheus: true
        prometheusOperator: true
        time: true
      runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
      appNamespacesTarget: ".*"
    global:
      rbac:
        create: true
        pspEnabled: true
    alertmanager:
      enabled: true
      apiVersion: v2
      config:
        global:
          resolve_timeout: 5m
          smtp_smarthost: "${SMTP_HOST}:${SMTP_STARTTLS_PORT}"
          smtp_from: "${SMTP_FROM}"
          smtp_auth_username: "${SMTP_USERNAME}"
          smtp_auth_password: "${SMTP_PASSWORD}"
        route:
          group_by: ['job', 'alertname']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 24h
          receiver: 'discord'
          routes:
            - match:
                alertname: Watchdog
              receiver: 'null'
            - match_re:
                severity: critical|warning
              continue: true
              receiver: 'discord'
        inhibit_rules:
          - source_match:
              severity: 'critical'
            target_match:
              severity: 'warning'
            equal: ['alertname', 'namespace']
        receivers:
          - name: 'null'
          - name: 'discord'
            slack_configs:
              - url: "${ALERT_DISCORD_WEBHOOK_URL}/slack"
      service:
        clusterIP: ""
        port: 9093
        targetPort: 9093
        nodePort: 30903
        type: ClusterIP
      alertmanagerSpec:
        image:
          repository: quay.io/prometheus/alertmanager
          tag: v0.21.0
          sha: ""
        logFormat: logfmt
        logLevel: info
        replicas: 1
        retention: 120h
        securityContext:
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
        listenLocal: false
        portName: "web"
        clusterAdvertiseAddress: false
    grafana:
      enabled: true
      adminPassword: "${GRAFANA_PASSWORD}"
      grafana.ini:
        server:
          root_url: "https://grafana.${INTERNAL_DOMAIN}"
        auth.basic:
          disable_login_form: false
        auth.generic_oauth:
          enabled: true
          allow_sign_up: true
          team_ids:
          allowed_organizations:
          name: Auth0
          client_id: "${AUTH0_CLIENT_ID}"
          client_secret: "${AUTH0_CLIENT_SECRET}"
          scopes: openid profile email
          auth_url: "https://${AUTH0_DOMAIN}.us.auth0.com/authorize"
          token_url: "https://${AUTH0_DOMAIN}.us.auth0.com/oauth/token"
          api_url: "https://${AUTH0_DOMAIN}.us.auth0.com/userinfo"
          role_attribute_path: role
        smtp:
          enabled: true
          host: "${SMTP_HOST}:${SMTP_PORT}"
          user: "${SMTP_USERNAME}"
          password: "${SMTP_PASSWORD}"
          from_address: "${SMTP_FROM}"
          from_name: Grafana
      namespaceOverride: ""
      defaultDashboardsEnabled: true
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          nginx-dashboard:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
            datasource: Prometheus
          blocky:
            url: https://raw.githubusercontent.com/0xERR0R/blocky/master/docs/blocky-grafana.json
            datasource: Prometheus
          unifi-client-insights:
            gnetId: 11315
            revision: 8
            datasource: Prometheus
          unifi-network-sites:
            gnetId: 11311
            revision: 4
            datasource: Prometheus
          unifi-uap-insights:
            gnetId: 11314
            revision: 9
            datasource: Prometheus
          unifi-usw-insights:
            gnetId: 11312
            revision: 8
            datasource: Prometheus
          longhorn-storage:
            gnetId: 13032
            revision: 6
            datasource: Prometheus
          node-exporter-full:
            gnetId: 1860
            revision: 21
            datasource: Prometheus
          nextcloud:
            gnetId: 9632
            revision: 1
            datasource: Prometheus
          zfs-on-linux:
            gnetId: 328
            revision: 1
            datasource: Prometheus
          zfs-node-exporter:
            gnetId: 7845
            revision: 4
            datasource: Prometheus
          logging-dash-loki:
            gnetId: 12611
            revision: 1
            datasource: Loki
      plugins:
        - natel-discrete-panel
        - pr0ps-trackmap-panel
        - grafana-piechart-panel
        - vonage-status-panel
        - grafana-worldmap-panel
        - grafana-clock-panel
      ingress:
        enabled: false
      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard
        datasources:
          enabled: true
          defaultDatasourceEnabled: true
          createPrometheusReplicasDatasources: false
          label: grafana_datasource
      additionalDataSources:
        - name: Loki
          type: loki
          access: proxy
          url: http://loki.observability.svc.cluster.local:3100
      service:
        portName: service
      serviceMonitor:
        selfMonitor: true
    kubeApiServer:
      enabled: false
    kubelet:
      enabled: false
    kubeControllerManager:
      enabled: true
      service:
        port: 10252
        targetPort: 10252
      serviceMonitor:
        interval: ""
        https: true
        insecureSkipVerify: true
    coreDns:
      enabled: true
      service:
        port: 9153
        targetPort: 9153
    kubeDns:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: true
      service:
        port: 10249
        targetPort: 10249
    kubeStateMetrics:
      enabled: true
    nodeExporter:
      enabled: true
      jobLabel: jobLabel
    prometheus-node-exporter:
      namespaceOverride: ""
      podLabels:
        jobLabel: node-exporter
      extraArgs:
        - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
        - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
    prometheusOperator:
      enabled: true
      tls:
        enabled: true
        tlsMinVersion: VersionTLS13
      admissionWebhooks:
        failurePolicy: Fail
        enabled: true
        patch:
          enabled: true
          image:
            repository: jettech/kube-webhook-certgen
            tag: v1.5.0
            sha: ""
            pullPolicy: IfNotPresent
      serviceAccount:
        create: true
      service:
        nodePort: 30080
        nodePortTls: 30443
        type: ClusterIP
      kubeletService:
        enabled: true
        namespace: kube-system
      serviceMonitor:
        selfMonitor: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      image:
        repository: quay.io/prometheus-operator/prometheus-operator
        tag: v0.45.0
        sha: ""
        pullPolicy: IfNotPresent
      configmapReloadImage:
        repository: docker.io/jimmidyson/configmap-reload
        tag: v0.4.0
        sha: ""
      prometheusConfigReloaderImage:
        repository: quay.io/prometheus-operator/prometheus-config-reloader
        tag: v0.44.0
        sha: ""
      configReloaderCpu: 700m
      configReloaderMemory: 25Mi
      secretFieldSelector: ""
    prometheus:
      enabled: true
      serviceAccount:
        create: true
        name: ""
      service:
        port: 9090
        targetPort: 9090
        nodePort: 30090
        type: ClusterIP
      prometheusSpec:
        image:
          repository: quay.io/prometheus/prometheus
          tag: v2.22.1
          sha: ""
        retention: 10d
        walCompression: false
        storageSpec:
         volumeClaimTemplate:
           spec:
             storageClassName: longhorn
             accessModes: ["ReadWriteOnce"]
             resources:
               requests:
                 storage: 50Gi
        securityContext:
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
        portName: "web"
