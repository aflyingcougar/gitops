# https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus
  namespace: observability
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 14.5.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  values:
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverError: true
        kubeApiserverSlos: true
        kubelet: true
        kubePrometheusGeneral: true
        kubePrometheusNodeAlerting: true
        kubePrometheusNodeRecording: true
        kubernetesAbsent: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: true
        kubeStateMetrics: true
        network: true
        node: true
        prometheus: true
        prometheusOperator: true
        time: true
      runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
      appNamespacesTarget: ".*"
    global:
      rbac:
        create: true
        pspEnabled: true
        pspAnnotations: {}
      imagePullSecrets: []
    alertmanager:
      enabled: true
      apiVersion: v2
      serviceAccount:
        create: true
        name: ""
        annotations: {}
      podDisruptionBudget:
        enabled: false
        minAvailable: 1
        maxUnavailable: ""
      tplConfig: false
      templateFiles: {}
      ingress:
        enabled: false
        annotations: {}
        labels: {}
        hosts: []
        paths: []
        tls: []
      secret:
        annotations: {}
      ingressPerReplica:
        enabled: false
        annotations: {}
        labels: {}
        hostPrefix: ""
        hostDomain: ""
        paths: []
        tlsSecretName: ""
        tlsSecretPerReplica:
          enabled: false
          prefix: "alertmanager"
      service:
        annotations: {}
        labels: {}
        clusterIP: ""
        port: 9093
        targetPort: 9093
        nodePort: 30903
        additionalPorts: []
        externalIPs: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        type: ClusterIP
      servicePerReplica:
        enabled: false
        annotations: {}
        port: 9093
        targetPort: 9093
        nodePort: 30904
        loadBalancerSourceRanges: []
        type: ClusterIP
      serviceMonitor:
        interval: ""
        selfMonitor: true
        scheme: ""
        tlsConfig: {}
        bearerTokenFile:
        metricRelabelings: []
        relabelings: []
      alertmanagerSpec:
        podMetadata: {}
        image:
          repository: quay.io/prometheus/alertmanager
          tag: v0.21.0
          sha: ""
        useExistingSecret: false
        secrets: []
        configMaps: []
        alertmanagerConfigSelector: {}
        alertmanagerConfigNamespaceSelector: {}
        logFormat: logfmt
        logLevel: info
        replicas: 1
        retention: 120h
        storage: {}
        externalUrl:
        routePrefix: /
        paused: false
        nodeSelector: {}
        resources: {}
        podAntiAffinity: ""
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        affinity: {}
        tolerations: []
        securityContext:
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
        listenLocal: false
        containers: []
        volumes: []
        volumeMounts: []
        priorityClassName: ""
        additionalPeers: []
        portName: "web"
        clusterAdvertiseAddress: false
    grafana:
      enabled: true
      namespaceOverride: ""
      defaultDashboardsEnabled: true
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          nginx-dashboard:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
            datasource: Prometheus
          blocky:
            url: https://raw.githubusercontent.com/0xERR0R/blocky/master/docs/blocky-grafana.json
            datasource: Prometheus
          unifi-client-insights:
            gnetId: 11315
            revision: 8
            datasource: Prometheus
          unifi-network-sites:
            gnetId: 11311
            revision: 4
            datasource: Prometheus
          unifi-uap-insights:
            gnetId: 11314
            revision: 9
            datasource: Prometheus
          unifi-usw-insights:
            gnetId: 11312
            revision: 8
            datasource: Prometheus
          longhorn-storage:
            gnetId: 13032
            revision: 6
            datasource: Prometheus
          node-exporter-full:
            gnetId: 1860
            revision: 21
            datasource: Prometheus
          nextcloud:
            gnetId: 9632
            revision: 1
            datasource: Prometheus
          zfs-on-linux:
            gnetId: 328
            revision: 1
            datasource: Prometheus
          zfs-node-exporter:
            gnetId: 7845
            revision: 4
            datasource: Prometheus
          logging-dash-loki:
            gnetId: 12611
            revision: 1
            datasource: Loki
      plugins:
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - grafana-piechart-panel
      - vonage-status-panel
      - grafana-worldmap-panel
      - grafana-clock-panel
      ingress:
        enabled: false
        annotations: {}
        labels: {}
        hosts: []
        path: /
        tls: []
      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard
          annotations: {}
        datasources:
          enabled: true
          defaultDatasourceEnabled: true
          annotations: {}
          createPrometheusReplicasDatasources: false
          label: grafana_datasource
      extraConfigmapMounts: []
      additionalDataSources:
        - name: Loki
          type: loki
          access: proxy
          url: http://loki.observability.svc.cluster.local:3100
      service:
        portName: service
      serviceMonitor:
        interval: ""
        selfMonitor: true
        path: "/metrics"
        metricRelabelings: []
        relabelings: []
    kubeApiServer:
      enabled: true
      tlsConfig:
        serverName: kubernetes
        insecureSkipVerify: false
      relabelings: []
      serviceMonitor:
        interval: ""
        jobLabel: component
        selector:
          matchLabels:
            component: apiserver
            provider: kubernetes
        metricRelabelings: []
    kubelet:
      enabled: true
      namespace: kube-system
      serviceMonitor:
        interval: ""
        https: true
        cAdvisor: true
        probes: true
        resource: false
        resourcePath: "/metrics/resource/v1alpha1"
        cAdvisorMetricRelabelings: []
        probesMetricRelabelings: []
        cAdvisorRelabelings:
        - sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
        probesRelabelings:
        - sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
        resourceRelabelings:
        - sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
        metricRelabelings: []
        relabelings:
        - sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
    kubeControllerManager:
      enabled: true
      endpoints: []
      service:
        port: 10252
        targetPort: 10252
      serviceMonitor:
        interval: ""
        https: false
        insecureSkipVerify:
        serverName:
        metricRelabelings: []
        relabelings: []
    coreDns:
      enabled: true
      service:
        port: 9153
        targetPort: 9153
      serviceMonitor:
        interval: ""
        metricRelabelings: []
        relabelings: []
    kubeDns:
      enabled: false
      service:
        dnsmasq:
          port: 10054
          targetPort: 10054
        skydns:
          port: 10055
          targetPort: 10055
      serviceMonitor:
        interval: ""
        metricRelabelings: []
        relabelings: []
        dnsmasqMetricRelabelings: []
        dnsmasqRelabelings: []
    kubeEtcd:
      enabled: true
      endpoints: []
      service:
        port: 2381
        targetPort: 2381
      serviceMonitor:
        interval: ""
        scheme: http
        insecureSkipVerify: false
        serverName: ""
        caFile: ""
        certFile: ""
        keyFile: ""
        metricRelabelings: []
        relabelings: []
    kubeScheduler:
      enabled: true
      endpoints: []
      service:
        port: 10251
        targetPort: 10251
      serviceMonitor:
        interval: ""
        https: false
        insecureSkipVerify:
        serverName:
        metricRelabelings: []
        relabelings: []
    kubeProxy:
      enabled: true
      endpoints: []
      service:
        port: 10249
        targetPort: 10249
      serviceMonitor:
        interval: ""
        https: false
        metricRelabelings: []
        relabelings: []
    kubeStateMetrics:
      enabled: true
      serviceMonitor:
        interval: ""
        metricRelabelings: []
        relabelings: []
    kube-state-metrics:
      namespaceOverride: ""
      rbac:
        create: true
      podSecurityPolicy:
        enabled: true
    nodeExporter:
      enabled: true
      jobLabel: jobLabel
      serviceMonitor:
        interval: ""
        scrapeTimeout: ""
        metricRelabelings: []
        relabelings: []
    prometheus-node-exporter:
      namespaceOverride: ""
      podLabels:
        jobLabel: node-exporter
      extraArgs:
      - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
      - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
    prometheusOperator:
      enabled: true
      tls:
        enabled: true
        tlsMinVersion: VersionTLS13
      admissionWebhooks:
        failurePolicy: Fail
        enabled: true
        patch:
          enabled: true
          image:
            repository: jettech/kube-webhook-certgen
            tag: v1.5.0
            sha: ""
            pullPolicy: IfNotPresent
          resources: {}
          priorityClassName: ""
          podAnnotations: {}
          nodeSelector: {}
          affinity: {}
          tolerations: []
      namespaces: {}
      denyNamespaces: []
      alertmanagerInstanceNamespaces: []
      prometheusInstanceNamespaces: []
      thanosRulerInstanceNamespaces: []
      serviceAccount:
        create: true
        name: ""
      service:
        annotations: {}
        labels: {}
        clusterIP: ""
        nodePort: 30080
        nodePortTls: 30443
        additionalPorts: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        type: ClusterIP
        externalIPs: []
      podLabels: {}
      podAnnotations: {}
      kubeletService:
        enabled: true
        namespace: kube-system
      serviceMonitor:
        interval: ""
        scrapeTimeout: ""
        selfMonitor: true
        metricRelabelings: []
        relabelings: []
      resources: {}
      hostNetwork: false
      nodeSelector: {}
      tolerations: []
      affinity: {}
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      image:
        repository: quay.io/prometheus-operator/prometheus-operator
        tag: v0.45.0
        sha: ""
        pullPolicy: IfNotPresent
      configmapReloadImage:
        repository: docker.io/jimmidyson/configmap-reload
        tag: v0.4.0
        sha: ""
      prometheusConfigReloaderImage:
        repository: quay.io/prometheus-operator/prometheus-config-reloader
        tag: v0.44.0
        sha: ""
      configReloaderCpu: 700m
      configReloaderMemory: 25Mi
      secretFieldSelector: ""
    prometheus:
      enabled: true
      annotations: {}
      serviceAccount:
        create: true
        name: ""
      service:
        annotations: {}
        labels: {}
        clusterIP: ""
        port: 9090
        targetPort: 9090
        externalIPs: []
        nodePort: 30090
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        type: ClusterIP
        sessionAffinity: ""
      servicePerReplica:
        enabled: false
        annotations: {}
        port: 9090
        targetPort: 9090
        nodePort: 30091
        loadBalancerSourceRanges: []
        type: ClusterIP
      podDisruptionBudget:
        enabled: false
        minAvailable: 1
        maxUnavailable: ""
      thanosIngress:
        enabled: false
        annotations: {}
        labels: {}
        servicePort: 10901
        hosts: []
        paths: []
        tls: []
      ingress:
        enabled: false
        annotations: {}
        labels: {}
        hosts: []
        paths: []
        tls: []
      ingressPerReplica:
        enabled: false
        annotations: {}
        labels: {}
        hostPrefix: ""
        hostDomain: ""
        paths: []
        tlsSecretName: ""
        tlsSecretPerReplica:
          enabled: false
          prefix: "prometheus"
      podSecurityPolicy:
        allowedCapabilities: []
      serviceMonitor:
        interval: ""
        selfMonitor: true
        scheme: ""
        tlsConfig: {}
        bearerTokenFile:
        metricRelabelings: []
        relabelings: []
      prometheusSpec:
        disableCompaction: false
        apiserverConfig: {}
        scrapeInterval: ""
        scrapeTimeout: ""
        evaluationInterval: ""
        listenLocal: false
        enableAdminAPI: false
        image:
          repository: quay.io/prometheus/prometheus
          tag: v2.22.1
          sha: ""
        tolerations: []
        alertingEndpoints: []
        externalLabels: {}
        replicaExternalLabelName: ""
        replicaExternalLabelNameClear: false
        prometheusExternalLabelName: ""
        prometheusExternalLabelNameClear: false
        externalUrl: ""
        nodeSelector: {}
        secrets: []
        configMaps: []
        query: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: true
        ruleSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: true
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        probeSelectorNilUsesHelmValues: false
        probeSelector: {}
        probeNamespaceSelector: {}
        retention: 10d
        retentionSize: ""
        walCompression: false
        paused: false
        replicas: 1
        logLevel: info
        logFormat: logfmt
        routePrefix: /
        podMetadata: {}
        podAntiAffinity: ""
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        affinity: {}
        remoteRead: []
        remoteWrite: []
        remoteWriteDashboards: false
        resources: {}
        storageSpec:
         volumeClaimTemplate:
           spec:
             storageClassName: longhorn
             accessModes: ["ReadWriteOnce"]
             resources:
               requests:
                 storage: 50Gi
        volumes: []
        volumeMounts: []
        additionalScrapeConfigs: []
        additionalScrapeConfigsSecret: {}
        additionalPrometheusSecretsAnnotations: {}
        additionalAlertManagerConfigs: []
        additionalAlertRelabelConfigs: []
        securityContext:
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
        priorityClassName: ""
        thanos: {}
        containers: []
        initContainers: []
        portName: "web"
      additionalServiceMonitors: []
      additionalPodMonitors: []
  valueFileSecrets:
  - name: "kube-prometheus-stack-helm-values"